

/*1. Normalise the data shown in the table so that it has multiple tables (Film, Director, Star and Writer) with an appropriate Primary Key for each and suitable Foreign Key relationships set up so that the data can still be linked together as needed.
2. Save your database schema and the data that will be generated by it into a suitable file in the repository as a planning document.
3. Open TablePlus and connect to your ElephantSQL database
4. You are going to create some tables to match the schema
5. Then populate the tables with the data shown
6. Once you have the tables and data set up then you need to create queries to return the data needed as shown below:
*/



create table if not EXISTS Director(
	id SERIAL PRIMARY KEY,
	name TEXT,
	country TEXT
);
insert into Director(
	name,
	country
)
VALUES
	('Stanley Kubrick', 'USA'),
    ('George Lucas', 'USA'),
    ('Robert Mulligan', 'USA'),
    ('James Cameron', 'Canada'),
    ('David Lean', 'UK'),
    ('Anthony Mann', 'USA'),
    ('Theodoros Angelopoulos', 'Greece'),
    ('Paul Verhoeven', 'Netherlands'),
    ('Krzysztof Kieslowski', 'Poland'),
    ('Jean-Paul Rappeneau', 'France');

create table if not EXISTS Star(
	id SERIAL PRIMARY KEY,
	name TEXT,
	DOB date
);

insert into Star(
	name,
	DOB
)
VALUES
	('Keir Dullea', '1936-05-30'),
    ('Mark Hamill', '1951-09-25'),
    ('Gregory Peck', '1916-04-05'),
    ('Leonardo DiCaprio', '1974-11-11'),
    ('Julie Christie', '1940-04-14'),
    ('Charlton Heston', '1923-10-04'),
    ('Manos Katrakis', '1908-08-14'),
    ('Rutger Hauer', '1944-01-23'),
    ('Juliette Binoche', '1964-03-09'),
    ('Gerard Depardieu', '1948-12-27');


create table if not exists Writer(
	id SERIAL PRIMARY KEY,
	name TEXT,
	email TEXT
);

insert into Writer(
	name,
	email
)
VALUES
	('Arthur C Clarke', 'arthur@clarke.com'),
    ('George Lucas', 'george@email.com'),
    ('Harper Lee', 'harper@lee.com'),
    ('James Cameron', 'james@cameron.com'),
    ('Boris Pasternak', 'boris@boris.com'),
    ('Frederick Frank', 'fred@frank.com'),
    ('Theodoros Angelopoulos', 'theo@angelopoulos.com'),
    ('Erik Hazelhoff Roelfzema', 'erik@roelfzema.com'),
    ('Krzysztof Kieslowski', 'email@email.com'),
    ('Edmond Rostand', 'edmond@rostand.com');


create table if not exists Film(
	id SERIAL PRIMARY KEY,
	title TEXT,
	director_id int,
	star_id int,
	writer_id int,
	year int,
	genre TEXT,
	score int,
	CONSTRAINT fk_director
		FOREIGN KEY(director_id)
			REFERENCES Director(id),
	CONSTRAINT fk_star
		FOREIGN KEY(star_id)
			REFERENCES Star(id),
	CONSTRAINT fk_writer
		FOREIGN KEY(writer_id)
			REFERENCES Writer(id)
);
insert into Film(
	title,
	director_id,
	star_id,
	writer_id,
	year,
	genre,
	score
)
VALUES
	('2001: A Space Odyssey', 1, 1, 1, 1968, 'Science Fiction', 10),
    ('Star Wars: A New Hope', 2, 2, 2, 1977, 'Science Fiction', 7),
    ('To Kill A Mockingbird', 3, 3, 3, 1962, 'Drama', 10),
    ('Titanic', 4, 4, 4, 1997, 'Romance', 5),
    ('Dr Zhivago', 5, 5, 5, 1965, 'Historical', 8),
    ('El Cid', 6, 6, 6, 1961, 'Historical', 6),
    ('Voyage to Cythera', 7, 7, 7, 1984, 'Drama', 8),
    ('Soldier of Orange', 8, 8, 8, 1977, 'Thriller', 8),
    ('Three Colours: Blue', 9, 9, 9, 1993, 'Drama', 8),
    ('Cyrano de Bergerac', 10, 10, 10, 1990, 'Historical', 9);

/* 1. Show the title and director name for all films
   2. Show the title, director and star name for all films
   3. Show the title of films where the director is from the USA
   4. Show only those films where the writer and the director are the same person
   5. Show directors and film titles for films with a score of 8 or higher
   6. Make at least 5 more queries to demonstrate your understanding of joins, and other relationships between tables.
*/


select Film.title as Movies, director.name as Directors from Film join Director on film.director_id = director.id;

select Film.title as Movies, director.name as Directors, star.name as Star from Film join Director on film.director_id = director.id join Star on film.star_id = star.id;

select Film.title as Movies, director.country as Directors_Country from Film join Director on film.director_id = director.id where director.country ='USA'

select Film.title as Movies, director.name as Directors, writer.name as Writer from Film join Director on film.director_id = director.id join writer on film.writer_id = writer.id where writer.name = director.name;

select Film.title as Movies, director.name as Directors, film.score as Score from Film join Director on film.director_id = director.id where film.score>=8;

select Film.title as Movies, director.name as Directors, film.year as Year from Film join Director on film.director_id = director.id order by film.year;
select Film.title as Movies, director.name as Directors, film.year as Year from Film join Director on film.director_id = director.id order by film.year desc;
select Film.title as Movies, director.name as Directors, film.score as Score from Film join Director on film.director_id = director.id where film.score = 6;
select Film.title as Movies, director.name as Directors, writer.name as Writer, star.name as Star from Film join Director on film.director_id = director.id join writer on film.writer_id = writer.id join Star on film.star_id = star.id;
select Film.title as Movies, director.name as Directors, writer.name as Writer, star.name as Star from Film join Director on film.director_id = director.id join writer on film.writer_id = writer.id join Star on film.star_id = star.id LIMIT 6;

/*

1. Refactor the database tables so that the Actors, Directors and Writers all identify people (using a Foreign Key) that are present in a single People table
2. Where necessary refactor the queries to take advantage of this new structure
*/
create table if not EXISTS People(
	id Serial PRIMARY KEY,
	name TEXT
);
insert into People(
	name
)
VALUES
	('Stanley Kubrick'),
	('George Lucas'),
	('Robert Mulligan'),
	('James Cameron'),
	('David Lean'),
	('Anthony Mann'),
	('Theodoros Angelopoulos'),
	('Paul Verhoeven'),
	('Krzysztof Kieslowski'),
	('Jean-Paul Rappeneau'),
	('Keir Dullea'),
	('Mark Hamill'),
	('Gregory Peck'),
	('Leonardo DiCaprio'),
	('Julie Christie'),
	('Charlton Heston'),
	('Manos Katrakis'),
	('Rutger Hauer'),
	('Juliette Binoche'),
	('Gerard Depardieu'),
	('Arthur C Clarke'),
	('Boris Pasternak'),
	('Frederick Frank'),
	('Edmond Rostand'),
	('Erik Hazelhoff Roelfzema');

create table if not exists Writer(
	id SERIAL PRIMARY KEY,
	people_id int,
	email TEXT,
	CONSTRAINT fk_people
		FOREIGN KEY(people_id)
			REFERENCES People(id)
);

insert into Writer(
	people_id,
	email
)
VALUES
	(21, 'arthur@clarke.com'),
	(2, 'george@email.com'),
	(22, 'harper@lee.com'),
	(4, 'james@cameron.com'),
	(23, 'boris@boris.com'),
	(24, 'fred@frank.com'),
	(7, 'theo@angelopoulos.com'),
	(25, 'erik@roelfzema.com'),
	(9, 'email@email.com'),
	(26, 'edmond@rostand.com');

create table if not EXISTS Director(
	id SERIAL PRIMARY KEY,
	people_id int,
	country TEXT,
	CONSTRAINT fk_people
		FOREIGN KEY(people_id)
			REFERENCES People(id)

);

INSERT INTO Director(
	people_id,
	country
)
VALUES
	(1, 'USA'),
	(2, 'USA'),
	(3, 'USA'),
	(4, 'Canada'),
	(5, 'UK'),
	(6, 'USA'),
	(7, 'Greece'),
	(8, 'Netherlands'),
	(9, 'Poland'),
	(10, 'France');


create table if not EXISTS Star(
	id SERIAL PRIMARY KEY,
	people_id int,
	DOB date,
	CONSTRAINT fk_people
		FOREIGN KEY(people_id)
			REFERENCES People(id)
);

insert into Star(
	people_id,
	DOB
)
VALUES
	(11, '1936-05-30'),
	(12, '1951-09-25'),
	(13, '1916-04-05'),
	(14, '1974-11-11'),
	(15, '1940-04-14'),
	(16, '1923-10-04'),
	(17, '1908-08-14'),
	(18, '1944-01-23'),
	(19, '1964-03-09'),
	(20, '1948-12-27');

CREATE TABLE IF NOT EXISTS Film(
    ID SERIAL PRIMARY KEY,
    Title TEXT,
    DirectorID INT,
    StarID INT,
    WriterID INT,
    Year INT,
    Genre TEXT,
    Score INT,
    CONSTRAINT fk_director
    	FOREIGN KEY(DirectorID)
    		REFERENCES Director(id),
    CONSTRAINT fk_star
    	FOREIGN KEY(StarID)
    		REFERENCES Star(id),
    CONSTRAINT fk_writer
    	FOREIGN KEY(WriterID)
    		REFERENCES Writer(id)
);

INSERT INTO Film(
	Title,
	DirectorID,
	StarID,
	WriterID,
	Year,
	Genre,
	Score
)
VALUES
	('2001: A Space Odyssey', 1, 1, 1, 1968, 'Science Fiction', 10),
	('Star Wars: A New Hope', 2, 2, 2, 1977, 'Science Fiction', 7),
	('To Kill A Mockingbird', 3, 3, 3, 1962, 'Drama', 10),
	('Titanic', 4, 4, 4, 1997, 'Romance', 5),
	('Dr Zhivago', 5, 5, 5, 1965, 'Historical', 8),
	('El Cid', 6, 6, 6, 1961, 'Historical', 6),
	('Voyage to Cythera', 7, 7, 7, 1984, 'Drama', 8),
	('Soldier of Orange', 8, 8, 8, 1977, 'Thriller', 8),
	('Three Colours: Blue', 9, 9, 9, 1993, 'Drama', 8),
	('Cyrano de Bergerac', 10, 10, 10, 1990, 'Historical', 9);

SELECT f.Title, p.name AS DirectorName
FROM Film f
JOIN Director d ON f.DirectorID = d.id
JOIN People p ON d.people_id = p.id;

SELECT f.Title, pd.name AS DirectorName, ps.name AS StarName
FROM Film f
JOIN Director d ON f.DirectorID = d.id
JOIN Star s ON f.StarID = s.id
JOIN People pd ON d.people_id = pd.id
JOIN People ps ON s.people_id = ps.id;

SELECT f.Title, d.country
FROM Film f
JOIN Director d ON f.DirectorID = d.id
JOIN People p ON d.people_id = p.id
WHERE d.country = 'USA';

SELECT f.Title, d.people_id as directorNameId, w.people_id as writerNameId
FROM Film f
JOIN Director d ON f.DirectorID = d.id
JOIN Writer w ON f.WriterID = w.id
WHERE d.people_id = w.people_id;

SELECT f.Title, p.name AS DirectorName
FROM Film f
JOIN Director d ON f.DirectorID = d.id
JOIN People p ON d.people_id = p.id
WHERE f.Score >= 8;

--Queries i made
SELECT Title, Genre
FROM Film;

SELECT Genre, COUNT(*) AS NumberOfFilms
FROM Film
GROUP BY Genre;

SELECT Title, Year, Score
FROM Film
WHERE Year > 1990 AND Score < 7;

SELECT p.name
FROM People p
JOIN Director d ON p.id = d.people_id
JOIN Writer w ON p.id = w.people_id;

SELECT Genre, AVG(Score) AS AverageScore
FROM Film
GROUP BY Genre;


