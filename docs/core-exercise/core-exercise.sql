-- CORE EXERCISE --
--1. Normalise the data shown in the table so that it has multiple tables
--   (Film, Director, Star and Writer) with an appropriate Primary Key for each
--   and suitable Foreign Key relationships set up so that the data can still be
--   linked together as needed.
--2. Save your database schema and the data that will be generated by it into
--   a suitable file in the repository as a planning document.
--3. Open TablePlus and connect to your ElephantSQL database
--4. You are going to create some tables to match the schema

-- 4. You are going to create some tables to match the schema
CREATE TABLE Directors (
    id SERIAL PRIMARY KEY,
    name TEXT,
    country TEXT
);

CREATE TABLE Stars (
    id SERIAL PRIMARY KEY,
    name TEXT,
    birthday TEXT
);

CREATE TABLE Writers (
    id SERIAL PRIMARY KEY,
    name TEXT,
    email TEXT
);

CREATE TABLE Films (
    id SERIAL PRIMARY KEY,
    title TEXT,
    director_id INT,
    star_id INT,
    writer_id INT,
    year INT,
    genre TEXT,
    score INT,
    UNIQUE(title),
    CONSTRAINT fk_director
        FOREIGN KEY (director_id)
            REFERENCES Directors(id),
    CONSTRAINT fk_star
        FOREIGN KEY (star_id)
            REFERENCES Stars(id),
    CONSTRAINT fk_writer
        FOREIGN KEY (writer_id)
            REFERENCES Writers(id)
);

-- 5. Then populate the tables with the data shown

INSERT INTO Directors
(name, country)
VALUES
('Stanley Kubrick', 'USA'),
('George Lucas', 'USA'),
('Robert Mulligan', 'USA'),
('James Cameron', 'Canada'),
('David Lean', 'UK'),
('Anthony Mann', 'USA'),
('Theodoros Angelopoulos', 'Greece'),
('Paul Verhoeven', 'Netherlands'),
('Krzysztof Kieslowski', 'Poland'),
('Jean-Paul Rappeneau', 'France');

INSERT INTO Stars
(name, birthday)
VALUES
('Keir Dullea', '30/05/1936'),
('Mark Hamill', '25/09/1951'),
('Gregory Peck', '05/04/1916'),
('Leonardo DiCaprio', '11/11/1974'),
('Julie Christie', '14/04/1940'),
('Charlton Heston', '04/10/1923'),
('Manos Katrakis', '14/08/1908'),
('Rutger Hauer', '23/01/1944'),
('Juliette Binoche', '09/03/1964'),
('Gerard Depardieu', '27/12/1948');

INSERT INTO Writers
(name, email)
VALUES
('Arthur C Clarke', 'arthur@clarke.com'),
('George Lucas', 'george@email.com'),
('Harper Lee', 'harper@lee.com'),
('James Cameron', 'james@cameron.com'),
('Boris Pasternak', 'boris@boris.com'),
('Frederick Frank', 'fred@frank.com'),
('Theodoros Angelopoulos', 'theo@angelopoulos.com'),
('Erik Hazelhoff Roelfzema', 'erik@roelfzema.com'),
('Krzysztof Kieslowski', 'email@email.com'),
('Edmond Rostand', 'edmond@rostand.com');

INSERT INTO Films
(title, director_id, star_id, writer_id, year, genre, score)
VALUES
('2001: A Space Odyssey', 1, 1, 1, 1968, 'Science Fiction', 10),
('Star Wars: A New Hope', 2, 2, 2, 1977, 'Science Fiction', 7),
('To Kill A Mockingbird', 3, 3, 3, 1962, 'Drama', 10),
('Titanic', 4, 4, 4, 1997, 'Romance', 5),
('Dr Zhivago', 5, 5, 5, 1965, 'Historical', 8),
('El Cid', 6, 6, 6, 1961, 'Historical', 6),
('Voyage to Cythera', 7, 7, 7, 1984, 'Drama', 8),
('Soldier of Orange', 8, 8, 8, 1977, 'Thriller', 8),
('Three Colours: Blue', 9, 9, 9, 1993, 'Drama', 8),
('Cyrano de Bergerac', 10, 10, 10, 1990, 'Historical', 9);

-- 6. Once you have the tables and data set up then you need to create queries to return the data needed as shown below:

-- 1. Show the title and director name for all films
SELECT films.title, directors.name AS Director
FROM Films
INNER JOIN Directors
ON films.director_id = directors.id;

-- 2. Show the title, director and star name for all films

SELECT films.title, directors.name AS Director, stars.name AS Star
FROM Films
INNER JOIN Directors
ON films.director_id = directors.id
INNER JOIN Stars
ON films.star_id = stars.id;

-- 3. Show the title of films where the director is from the USA

SELECT films.title, directors.name AS Director, directors.country AS DirectorCountry
FROM Films
INNER JOIN Directors
ON films.director_id = directors.id
WHERE directors.country = 'USA';

-- 4. Show only those films where the writer and the director are the same person

SELECT films.title, writers.name AS Writer, directors.name AS Director
FROM Films
INNER JOIN Directors
ON films.director_id = directors.id
INNER JOIN Writers
ON films.writer_id = writers.id
WHERE directors.name = writers.name;

-- 5. Show directors and film titles for films with a score of 8 or higher
SELECT films.title, directors.name AS Director, films.score as Score
FROM Films
INNER JOIN Directors
ON films.director_id = directors.id
WHERE films.score >= 8;


-- 6. Make at least 5 more queries to demonstrate your understanding of joins, and other relationships between tables.
-- 1. Showing writers of films with a score of 8
SELECT writers.name AS Writer, films.title, films.score
FROM Writers
LEFT JOIN films
ON writers.id = films.writer_id
WHERE films.score = 8;

-- 2. Showing the directors and the star of movies before 1990 (not including 1990)
SELECT films.title, directors.name AS Director, stars.name AS Star, films.year
FROM films
RIGHT JOIN Directors
ON films.director_id = directors.id
RIGHT JOIN Stars
ON films.star_id = stars.id
WHERE films.year < 1990;

-- 3. Showing films in the "Historial" genre with their directors
SELECT films.title, directors.name AS Director, films.genre
FROM Films
FULL JOIN Directors
ON films.director_id = directors.id
WHERE genre = 'Historical';

-- 4. Showing films and their stars with a score of 10
SELECT films.title, stars.name as Stars, films.score
FROM Films
INNER JOIN Stars
ON films.star_id = stars.id
WHERE films.score = 10;

-- 5. Showing stars of films made in the 1960s
SELECT films.title, stars.name AS Stars, films.year
FROM Films
JOIN Stars
ON films.star_id = stars.id
WHERE films.year BETWEEN 1960 AND 1969;




