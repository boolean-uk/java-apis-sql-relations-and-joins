-- Normalise the data shown in the table so that it has multiple tables
-- (Film, Director, Star and Writer) with an appropriate Primary Key
-- for each and suitable Foreign Key relationships set up so that the data can
-- still be linked together as needed.

-- Save your database schema and the data that will be generated by it into a suitable file
-- in the repository as a planning document.

--film:
--id, title, directorId, starId, writerId, year, genre, score
--
--Director:
--id, name, country
--
--Star:
--id, name, dateOfBirth
--
--Writer:
--id, name, email


-- Open TablePlus, BeekeeperStudio or your preferred database tool and connect to your Neon database
-- You are going to create some tables to match the schema

CREATE TABLE director(
	id serial PRIMARY KEY,
	name TEXT NOT NULL,
	country TEXT NOT NULL
);

CREATE TABLE star(
	id serial PRIMARY KEY,
	name TEXT NOT NULL,
	dob DATE NOT NULL
);

CREATE TABLE writer(
	id serial PRIMARY KEY,
	name TEXT NOT NULL,
	email TEXT NOT NULL
);

CREATE TABLE film(
	id serial PRIMARY KEY,
	title TEXT NOT NULL,
	directorId INTEGER NOT NULL REFERENCES director,
	starId INTEGER NOT NULL REFERENCES star,
	writerId INTEGER NOT NULL REFERENCES writer,
	year INTEGER NOT NULL,
	genre TEXT NOT NULL,
	score int NOT NULL
);


-- Then populate the tables with the data shown
INSERT INTO director(name, country)
VALUES
	('Stanley Kubrick','USA'),
	('George Lucas','USA'),
	('Robert Mulligan','USA'),
	('James Cameron','Canada'),
	('David Lean','UK'),
	('Anthony Mann','USA'),
	('Theodoros Angelopoulos','Greece'),
	('Paul Verhoeven','Netherlands'),
	('Krzysztof Kieslowski','Poland'),
	('Jean-Paul Rappeneau','France');

INSERT INTO star(name, dob)
VALUES
	('Keir Dullea','1936-05-30'),
	('Mark Hamill','1951-09-25'),
	('Gregory Peck','1916-04-05'),
	('Leonardo DiCaprio','1974-11-11'),
	('Julie Christie','1940-04-14'),
	('Charlton Heston','1923-10-04'),
	('Manos Katrakis','1908-08-14'),
	('Rutger Hauer','1944-01-23'),
	('Juliette Binoche','1964-03-09'),
	('Gerard Depardieu','1948-12-27');

INSERT INTO writer(name, email)
VALUES
	('Arthur C Clarke','arthur@clarke.com'),
	('George Lucas','george@email.com'),
	('Harper Lee','harper@lee.com'),
	('James Cameron','james@cameron.com'),
	('Boris Pasternak','boris@boris.com'),
	('Frederick Frank','fred@frank.com'),
	('Theodoros Angelopoulos','theo@angelopoulos.com'),
	('Erik Hazelhoff Roelfzema','erik@roelfzema.com'),
	('Krzysztof Kieslowsk','email@email.com'),
	('Edmond Rostand','edmond@rostand.com');

INSERT INTO film(title, directorId, starId, writerId, year, genre, score) VALUES
	('2001: A Space Odyssey', 1, 1, 1, 1968, 'Science Fiction', 10),
	('Star Wars: A New Hope', 2, 2, 2, 1977, 'Science Fiction', 7),
	('To Kill A Mockingbird', 3, 3, 3, 1962, 'Drama', 10),
	('Titanic', 4, 4, 4, 1997, 'Romance', 5),
	('Dr Zhivago', 5, 5, 5, 1965, 'Historical', 8),
	('El Cid', 6, 6, 6, 1961, 'Historical', 6),
	('Voyage to Cythera', 7, 7, 7, 1984, 'Drama', 8),
	('Soldier of Orange', 8, 8, 8, 1977, 'Thriller', 8),
	('Three Colours: Blue', 9, 9, 9, 1993, 'Drama', 8),
	('Cyrano de Bergerac', 10, 10, 10, 1990, 'Historical', 9);



-- Once you have the tables and data set up then you need to create queries to return the data needed as shown below:

-- Show the title and director name for all films
SELECT film.title, director.name
FROM film
JOIN director ON film.directorid = director.id;

-- Show the title, director and star name for all films
SELECT film.title AS film_title, director.name AS director_name, star.name AS star_name
FROM film
JOIN director ON film.directorid = director.id
JOIN star ON film.starid = star.id;

-- Show the title of films where the director is from the USA
SELECT film.title AS film_title
FROM film
JOIN director ON film.directorid = director.id
WHERE director.country = 'USA';

-- Show only those films where the writer and the director are the same person
SELECT film.title AS film_title
FROM film
JOIN director ON film.directorid = director.id
JOIN writer ON film.writerid = writer.id
WHERE director.name = writer.name;

-- Show directors and film titles for films with a score of 8 or higher
SELECT film.title AS film_title, director.name
FROM film
JOIN director ON film.directorid = director.id
WHERE film.score >= 8;

-- Make at least 5 more queries to demonstrate your understanding of joins, and other relationships between tables.
-- 1. Count number of genres
SELECT film.genre AS film_genre, COUNT(star.name)
FROM film
JOIN star ON film.starid = star.id
GROUP BY film.genre;

-- 2. Show film year and date of birth for the star in each film
SELECT film.title AS film_title, film.year AS film_year, star.dob AS star_dob
FROM film
JOIN star ON film.starid = star.id;

-- 3. Show the film and director for all directors that starts with J
SELECT film.title AS film_title, director.name
FROM film
JOIN director ON film.directorid = director.id
WHERE director.name LIKE 'J%';

-- 4. Show all films where Boris Pasternak and Frederick Frank are the writers.
SELECT film.title AS film_title, writer.id, writer.name
FROM film
JOIN writer ON film.writerId = writer.id
WHERE writer.name IN ('Boris Pasternak', 'Frederick Frank');

-- 5. Same as above but with check for ID instead.
SELECT film.title AS film_title, writer.name
FROM film
JOIN writer ON film.writerId = writer.id
WHERE writer.id IN (5, 6);